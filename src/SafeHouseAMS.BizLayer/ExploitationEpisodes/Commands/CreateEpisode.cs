using System;
using System.Threading.Tasks;
using SafeHouseAMS.BizLayer.Survivors;

namespace SafeHouseAMS.BizLayer.ExploitationEpisodes.Commands
{
    /// <summary>
    /// Создать новый эпизод
    /// </summary>
    public class CreateEpisode : EpisodeCommand
    {
        /// <summary>
        /// пострадавший к которому относится эта причина обращения
        /// </summary>
        public Guid SurvivorID { get; }

        /// <summary>
        /// Причина обращения - виды эксплуатации или насилия с описанием
        /// </summary>
        public ContactReason ContactReason { get; }

        /// <summary>
        /// Место эксплуатации - страна/город
        /// </summary>
        public string Place { get; }

        /// <summary>
        /// Вовлечение - как и кем
        /// </summary>
        public string Involvement { get; }

        /// <summary>
        /// Был_а ли несовершеннолетней на момент вовлечения/эксплуатации/насилия
        /// </summary>
        public bool WasJuvenile { get; }

        /// <summary>
        /// Продолжительность эксплуатации
        /// </summary>
        public TimeSpan Duration { get; }

        /// <summary>
        /// Методы контроля
        /// </summary>
        public ControlMethods ControlMethods { get; }

        /// <summary>
        /// Освобождение
        /// </summary>
        public EscapeStatus EscapeStatus { get; }

        /// <summary>
        /// конструктор команды создания нового эпизода
        /// </summary>
        /// <param name="entityID">идентификтаор эпизода</param>
        /// <param name="survivorId">идентификатор пострадавшего</param>
        /// <param name="contactReason"></param>
        /// <param name="place"></param>
        /// <param name="involvement"></param>
        /// <param name="wasJuvenile"></param>
        /// <param name="duration"></param>
        /// <param name="controlMethods"></param>
        /// <param name="escapeStatus"></param>
        /// <exception cref="ArgumentNullException"></exception>
        public CreateEpisode(Guid entityID,
            Guid survivorId,
            ContactReason contactReason,
            string place,
            string involvement,
            bool wasJuvenile,
            TimeSpan duration,
            ControlMethods controlMethods,
            EscapeStatus escapeStatus) : base(entityID)
        {
            SurvivorID = survivorId;
            ContactReason = contactReason ?? throw new ArgumentNullException(nameof(contactReason));
            Place = place ?? throw new ArgumentNullException(nameof(place));
            Involvement = involvement ?? throw new ArgumentNullException(nameof(involvement));
            WasJuvenile = wasJuvenile;
            Duration = duration;
            ControlMethods = controlMethods ?? throw new ArgumentNullException(nameof(controlMethods));
            EscapeStatus = escapeStatus;
        }

        internal override Task ApplyOn(IEpisodesRepository repository)
        {
            return repository.Create(EntityID, false, DateTime.Now, DateTime.Now,
            SurvivorID, ContactReason, Place, Involvement, WasJuvenile, Duration, ControlMethods, EscapeStatus);
        }
    }
}
