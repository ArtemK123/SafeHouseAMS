using System;
using System.Linq;
using System.Reflection;
using System.Text;
using EnumDescriber;

namespace SafeHouseAMS.BizLayer.ExploitationEpisodes
{
    /// <summary>
    /// Причина обращения с текстовыми деталями и уточнением типа
    /// </summary>
    /// <param name="Details">Текстовые детали</param>
    /// <param name="Type">Уточнение типа</param>
    /// <typeparam name="T">Тип детализации</typeparam>
    public record DetailedContactReason<T>(string Details, T Type) : DetailedContactReason(Details)
        where T : struct, Enum
    {
        private static bool IsFlagged;
        static DetailedContactReason()
        {
            IsFlagged = typeof(T).GetCustomAttribute<FlagsAttribute>() is not null;
        }

        /// <summary>
        /// Получить строковое описание типа
        /// </summary>
        /// <returns>Строка с описанием типа</returns>
        public string GetTypeDescription()
        {
            if (IsFlagged)
            {
                return Enum.GetValues<T>()
                    .Where(x => !x.Equals(default(T)))
                    .Where(x => Type.HasFlag(x))
                    .Select(x => x.GetDescription())
                    .Aggregate(new StringBuilder(), (acc, item) =>
                    {
                        if (acc.Length > 0)
                            acc.Append(", ");
                        acc.Append(item);
                        return acc;
                    }, sb => sb.ToString());
            }
            return Type.GetDescription();
        }
    }

    /// <summary>
    /// Причина обрщения с текстовыми деталями
    /// </summary>
    /// <param name="Details">текстовые детали</param>
    public record DetailedContactReason(string Details);
}
