using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace SafeHouseAMS.BizLayer.ExploitationEpisodes
{
    /// <summary>
    /// репозиторий эпизодов эксплуатации
    /// </summary>
    public interface IEpisodesRepository
    {
        /// <summary>
        /// создать новую запись
        /// </summary>
        /// <param name="id">идентификатор записи</param>
        /// <param name="isDeleted">признак удалённой записи</param>
        /// <param name="created">дата создания</param>
        /// <param name="lastEdit">дата последнего редактирования</param>
        /// <param name="survivorId">идентификатор пострадавшего</param>
        /// <param name="contactReason">причина обращения - вид эксплуатации</param>
        /// <param name="place">место эксплуатации</param>
        /// <param name="involvement">кем вовлекалась</param>
        /// <param name="wasJuvenile">несовершеннолетняя в момент обрщения</param>
        /// <param name="duration">продолжительность эксплуатации</param>
        /// <param name="controlMethods">методы контроля</param>
        /// <param name="escapeStatus">статус освобождения</param>
        /// <returns></returns>
        Task Create(Guid id, bool isDeleted, DateTime created, DateTime lastEdit,
            Guid survivorId, ContactReason contactReason, string place, string involvement, bool wasJuvenile,
            TimeSpan duration, ControlMethods controlMethods, EscapeStatus escapeStatus);

        /// <summary>
        /// Обновить запись
        /// </summary>
        /// <param name="entityID">идентификатор записи</param>
        /// <param name="editTimestamp">дата-время редактирования записи</param>
        /// <param name="contactReason">причина обращения</param>
        /// <param name="place">место эксплуатации</param>
        /// <param name="involvement">описание вовлечения</param>
        /// <param name="wasJuvenile">несовершеннолетняя в момент обрщения</param>
        /// <param name="duration">продолжительность эксплуатации</param>
        /// <param name="controlMethods">методы контроля</param>
        /// <param name="escapeStatus">статус освобождения</param>
        /// <returns></returns>
        Task Update(Guid entityID, DateTime editTimestamp, ContactReason contactReason, string place, string involvement, bool wasJuvenile, TimeSpan duration, ControlMethods controlMethods, EscapeStatus escapeStatus);

        /// <summary>
        /// Получить отдельный эпизод по его идентификатору
        /// </summary>
        /// <param name="id">идентификатор документа</param>
        /// <param name="cancellationToken">токен отмены операции</param>
        /// <returns>эпизод, или null - если по такому идентификатору ничего не удалось найти</returns>
        Task<Episode?> GetSingleAsync(Guid id, CancellationToken cancellationToken);

        /// <summary>
        /// получить все эпизоды по пострадавшему
        /// </summary>
        /// <param name="survivorId">идентификатор пострадавшего</param>
        /// <param name="cancellationToken">токен отмены операции</param>
        /// <returns>асинхронная последовательность записей эпизодов эксплуатации относящихся к пострадавшему</returns>
        IAsyncEnumerable<Episode> GetAllBySurvivor(Guid survivorId, CancellationToken cancellationToken);

        /// <summary>
        /// Удалить эпизод
        /// </summary>
        /// <param name="episodeId">идентификатор удаляемого эпизода</param>
        Task Delete(Guid episodeId);
    }
}
