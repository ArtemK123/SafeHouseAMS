using System;
using System.Collections.Generic;
using System.Text.Json;
using SafeHouseAMS.BizLayer.ExploitationEpisodes;
using SafeHouseAMS.BizLayer.Survivors;
using SafeHouseAMS.DataLayer.Models.Survivors;

namespace SafeHouseAMS.DataLayer.Models.ExploitationEpisodes
{
    internal class EpisodeDAL : BaseDalModel
    {
        public Guid SurvivorID { get; set; }
        public virtual SurvivorDAL Survivor { get; set; } = null!;

        #region contact reason fields

        public bool Involvement { get; set; }

        public bool Cse { get; set; }
        public int CseType { get; set; }

        public bool ForcedLabour { get; set; }
        public int ForcedLabourType { get; set; }

        public bool ForcedMarriage { get; set; }
        public int ForcedMarriageKind { get; set; }

        public bool Cre { get; set; }
        public bool Begging { get; set; }

        public bool ForcedCriminalActivity { get; set; }
        public int CriminalActivityType { get; set; }

        public bool OtherExploitationKind { get; set; }
        public bool SexualViolence { get; set; }
        public bool DomesticViolence { get; set; }
        public bool OtherViolenceKind { get; set; }

        public string ContactReasonDescriptions { get; set; } = "{}";
        #endregion

        public string Place { get; set; } = string.Empty;

        public string InvolvementDescription { get; set; } = string.Empty;

        public bool WasJuvenile { get; set; }

        public TimeSpan Duration { get; set; }

        #region control methods fields
        public int ControlMethods { get; set; }
        public int? DebtKind { get; set; }
        public string? OtherControlMethodDetails { get; set; }
        #endregion

        public int EscapeStatus { get; set; }

        public ControlMethods BuildControlMethods()
        {
            var debtKind = DebtKind.HasValue ? (DebtKind)DebtKind.Value as DebtKind? : null;
            return new((ControlMethodKind)ControlMethods, debtKind, OtherControlMethodDetails);
        }

        public void UpdateControlMethods(ControlMethods controlMethods)
        {
            ControlMethods = (int)controlMethods.Methods;
            DebtKind = controlMethods.DebtKind is null ? null : (int)controlMethods.DebtKind.Value;
            OtherControlMethodDetails = controlMethods.OtherDetails;
        }

        /// <summary>
        /// свернуть поля текущего объекта в тип ContactReason
        /// </summary>
        /// <returns>получившийся ContactReason</returns>
        public ContactReason BuildContactReason()
        {
            var descriptions = JsonSerializer.Deserialize<Dictionary<string, string>>(ContactReasonDescriptions) ??
                               new Dictionary<string, string>();


            descriptions.TryGetValue(nameof(ContactReason.Involvement), out var involvementDesc);
            var involvement = Involvement ? new DetailedContactReason(involvementDesc ?? string.Empty) : null;

            descriptions.TryGetValue(nameof(ContactReason.Cse), out var cseDesc);
            var cse = Cse ?
                new DetailedContactReason<CseType>(cseDesc ?? string.Empty, (CseType)CseType) : null;

            descriptions.TryGetValue(nameof(ContactReason.ForcedLabour), out var forcedLabourDesc);
            var forcedLabour = ForcedLabour ?
                new DetailedContactReason<ForcedLabourType>(forcedLabourDesc ?? string.Empty, (ForcedLabourType)ForcedLabourType) : null;

            descriptions.TryGetValue(nameof(ContactReason.ForcedMarriage), out var forcedMarriageDesc);
            var forcedMarriage = ForcedMarriage ?
                new DetailedContactReason<ForcedMarriageKind>(forcedMarriageDesc ?? string.Empty, (ForcedMarriageKind)ForcedMarriageKind) : null;

            descriptions.TryGetValue(nameof(ContactReason.Cre), out var creDesc);
            var cre = Cre ?
                new DetailedContactReason(creDesc ?? string.Empty) : null;

            descriptions.TryGetValue(nameof(ContactReason.Begging), out var beggingDesc);
            var begging = Begging ?
                new DetailedContactReason(beggingDesc ?? string.Empty) : null;

            descriptions.TryGetValue(nameof(ContactReason.ForcedCriminalActivity), out var forcedCriminalDesc);
            var forcedCriminal = ForcedCriminalActivity ?
                new DetailedContactReason<CriminalActivityType>(forcedCriminalDesc ?? string.Empty, (CriminalActivityType)CriminalActivityType) : null;

            descriptions.TryGetValue(nameof(ContactReason.OtherExploitationKind), out var otherExploitationDesc);
            var otherExploitaion = OtherExploitationKind ?
                new DetailedContactReason(otherExploitationDesc ?? string.Empty) : null;

            descriptions.TryGetValue(nameof(ContactReason.SexualViolence), out var sexualViolenceDesc);
            var sexualViolence = SexualViolence ?
                new DetailedContactReason(sexualViolenceDesc ?? string.Empty) : null;

            descriptions.TryGetValue(nameof(ContactReason.DomesticViolence), out var domesticViolenceDesc);
            var domesticViolence = DomesticViolence ?
                new DetailedContactReason(domesticViolenceDesc ?? string.Empty) : null;

            descriptions.TryGetValue(nameof(ContactReason.OtherViolenceKind), out var otherViolenceDesc);
            var otherViolence = OtherViolenceKind ?
                new DetailedContactReason(otherViolenceDesc ?? string.Empty) : null;

            return new(involvement,
            cse,
            forcedLabour,
            forcedMarriage,
            cre,
            begging,
            forcedCriminal,
            otherExploitaion,
            sexualViolence,
            domesticViolence,
            otherViolence);
        }

        /// <summary>
        /// обновить текущий объект новым ContactReason
        /// </summary>
        /// <param name="contactReason">новая свертка</param>
        public void UpdateContactReason(ContactReason contactReason)
        {
            var descriptions = new Dictionary<string, string>
            {
                [nameof(ContactReason.Involvement)] = contactReason.Involvement?.Details ?? string.Empty,
                [nameof(ContactReason.Cse)] = contactReason.Cse?.Details ?? string.Empty,
                [nameof(ContactReason.ForcedLabour)] = contactReason.ForcedLabour?.Details ?? string.Empty,
                [nameof(ContactReason.ForcedMarriage)] = contactReason.ForcedMarriage?.Details ?? string.Empty,
                [nameof(ContactReason.Cre)] = contactReason.Cre?.Details ?? string.Empty,
                [nameof(ContactReason.Begging)] = contactReason.Begging?.Details ?? string.Empty,
                [nameof(ContactReason.ForcedCriminalActivity)] = contactReason.ForcedCriminalActivity?.Details ?? string.Empty,
                [nameof(ContactReason.OtherExploitationKind)] = contactReason.OtherExploitationKind?.Details ?? string.Empty,
                [nameof(ContactReason.SexualViolence)] = contactReason.SexualViolence?.Details ?? string.Empty,
                [nameof(ContactReason.DomesticViolence)] = contactReason.DomesticViolence?.Details ?? string.Empty,
                [nameof(ContactReason.OtherViolenceKind)] = contactReason.OtherViolenceKind?.Details ?? string.Empty
            };

            ContactReasonDescriptions = JsonSerializer.Serialize(descriptions);

            Involvement = contactReason.Involvement is not null;

            Cse = contactReason.Cse is not null;
            CseType = (int)(contactReason.Cse?.Type ?? BizLayer.ExploitationEpisodes.CseType.None);

            ForcedLabour = contactReason.ForcedLabour is not null;
            ForcedLabourType =
                (int)(contactReason.ForcedLabour?.Type ?? BizLayer.ExploitationEpisodes.ForcedLabourType.None);

            ForcedMarriage = contactReason.ForcedMarriage is not null;
            ForcedMarriageKind = (int)(contactReason.ForcedMarriage?.Type ?? 0);

            Cre = contactReason.Cre is not null;
            Begging = contactReason.Begging is not null;

            ForcedCriminalActivity = contactReason.ForcedCriminalActivity is not null;
            CriminalActivityType = (int)(contactReason.ForcedCriminalActivity?.Type ??
                                         BizLayer.ExploitationEpisodes.CriminalActivityType.None);

            OtherExploitationKind = contactReason.OtherExploitationKind is not null;
            SexualViolence = contactReason.SexualViolence is not null;
            DomesticViolence = contactReason.DomesticViolence is not null;
            OtherViolenceKind = contactReason.OtherViolenceKind is not null;
        }

    }
}
