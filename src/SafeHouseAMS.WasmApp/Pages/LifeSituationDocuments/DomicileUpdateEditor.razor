@page "/DomicileUpdateEditor/{SurvivorID}"
@using SafeHouseAMS.BizLayer.LifeSituations
@using SafeHouseAMS.BizLayer.LifeSituations.Commands
@using SafeHouseAMS.BizLayer.LifeSituations.Records
@using SafeHouseAMS.WasmApp.Pages.Survivors
@using SafeHouseAMS.WasmApp.RecordEditors
@using System.Threading

@inject ILifeSituationDocumentsAggregate _documentsAggregate;
@inject NavigationManager _navigationManager;
@inject NotificationService _notificationService;

<h3>Обновление информации о проживании</h3>

<div class="container-fluid">
    <RadzenTemplateForm TItem="DomicileUpdateModel" Data="@_pageModel" Submit="@SubmitForm" >
        <div class="row">
            <div class="col-md-2">
                <RadzenLabel Text="Дата документа"/>
            </div>
            <div class="col-md-10">
                <RadzenDatePicker @bind-Value="@_pageModel.DocDate" ShowTime="true"/>
            </div>
        </div>
        <div class="row">
            <DomicileRecordComponent @ref="@_editor"/>
        </div>
        <div class="row justify-content-center">
            <div class="col-8 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
                <button type="submit" style="margin-right: 8px" class="btn btn-success">Добавить</button>
                <button type="reset" style="margin-left: 8px" class="btn btn-warning" @onclick="@CancelClick">Отмена</button>
            </div>
        </div>
    </RadzenTemplateForm>
</div>

@code {
    private class DomicileUpdateModel
    {
        public Guid DocId { get; } = Guid.NewGuid();
        public DateTime DocDate { get; set; } = DateTime.Now;
        public Guid SurvivorId { get; set; }
        public CreateRecordUpdateDocument<DomicileRecord> Command => new(DocId, SurvivorId, DocDate);
    }

    [Parameter] public string? SurvivorID { get; set; }
    private DomicileRecordComponent _editor = new();
    private readonly DomicileUpdateModel _pageModel = new();

    protected override void OnParametersSet()
    {
        if (Guid.TryParse(SurvivorID, out var id))
            _pageModel.SurvivorId = id;

        base.OnParametersSet();
    }

    private void CancelClick()
    {
        _notificationService.Notify(summary: "Операция отменена", severity:NotificationSeverity.Warning);
        _navigationManager.NavigateTo($"{nameof(SurvivorDetails)}/{SurvivorID}");
    }

    private async Task SubmitForm()
    {
        await _documentsAggregate.ApplyCommand(_pageModel.Command, CancellationToken.None);
        await _documentsAggregate.ApplyCommand(_editor.BuildCommandForDocument(_pageModel.DocId), CancellationToken.None);
        _notificationService.Notify(summary: "Успешно сохранено", severity:NotificationSeverity.Success);
        _navigationManager.NavigateTo($"{nameof(SurvivorDetails)}/{SurvivorID}");
    }
}
