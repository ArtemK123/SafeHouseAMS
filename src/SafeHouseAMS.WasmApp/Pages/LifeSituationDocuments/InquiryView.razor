@using SafeHouseAMS.BizLayer.LifeSituations
@using SafeHouseAMS.BizLayer.LifeSituations.InquirySources
@using System.Text
@using SafeHouseAMS.BizLayer.LifeSituations.Documents
@using SafeHouseAMS.WasmApp.RecordViews

<h3>Обращение за помощью</h3>
<div class="container-fluid">
    <RadzenFieldset Text="Обращение за помощью">
        <div class="row">
            <div class="col-md-8">
                <RadzenLabel Text="Дата обращения"/>
                <RadzenLabel Text="@InquiryDocument?.DocumentDate.ToString("d")"/>
            </div>
            <div class="col-md-4">
                <RadzenCheckBox TValue="bool?" Disabled="true" Value="@InquiryDocument?.IsJuvenile"/>
                <RadzenLabel Text="Несовершеннолетний в момент обращения"/>
            </div>
        </div>
        <div class="row" style="margin-top: 5px">
            @foreach (var inquirySource in InquiryDocument?.InquirySources ?? Enumerable.Empty<IInquirySource>())
            {
                switch (inquirySource)
                {
                    case SelfInquiry self:
                        <div class="col-md-3">
                            <div class="col-md">
                                <RadzenLabel Text="Самообращение:"/>
                            </div>
                            <div class="col-md">
                                <RadzenLabel Text="@Compose(self.Channel)"/>
                            </div>
                        </div>
                        break;
                    case ForwardedBySurvivor forwardSurvivor:
                        <div class="col-md-3">
                            <div class="col-md">
                                <RadzenLabel Text="Направлен другим пострадавшим:"/>
                            </div>
                            <div class="col-md">
                                <RadzenLabel Text="@forwardSurvivor.ForwardedBy"/>
                            </div>
                        </div>
                        break;
                    case ForwardedByPerson forwardPerson:
                        <div class="col-md-3">
                            <div class="col-md">
                                <RadzenLabel Text="Направлен другим лицом:"/>
                            </div>
                            <div class="col-md">
                                <RadzenLabel Text="@forwardPerson.ForwardedBy"/>
                            </div>
                            </div>
                        break;
                    case ForwardedByOrganization forwardOrg:
                        <div class="col-md-3">
                            <div class="col-md">
                                <RadzenLabel Text="Направлен другой организацией"/>
                            </div>
                            <div class="col-md">
                                <RadzenLabel Text="@forwardOrg.ForwardedBy"/>
                            </div>
                        </div>
                        break;
                }
            }
        </div>
        <div class="row" style="margin-top: 5px">
            <div class="col-md-6">
                <RadzenLabel Text="Гражданство:"/>
                <RadzenLabel Text="@InquiryDocument?.Citizenship.Citizenship"/>
            </div>
            <div class="col-md-6">
                <MigrationStatusRecordView Record="InquiryDocument?.MigrationStatus"/>
            </div>
        </div>
        <div class="row" style="margin-top: 5px">
            <div class="col-md-6">
                <DomicileRecordView Domicile="@InquiryDocument?.Domicile"/>
            </div>
            <div class="col-md-6">
                <RegistrationStatusRecordView Record="@InquiryDocument?.RegistrationStatus"/>
            </div>
        </div>
        <div class="row" style="margin-top: 5px">
            <ChildrenRecordView Record="@InquiryDocument?.HasChildren"/>
        </div>
        <div class="row">
            <div class="col-md-6">
                @if (InquiryDocument?.EducationLevel?.Any() == true)
                {
                    @foreach (var rec in InquiryDocument.EducationLevel)
                    {
                        <div class="row">
                            <EducationLevelRecordView Record="@rec"/>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info">
                        <RadzenLabel Text="Нет информации об уровне образования"/>
                    </div>
                }
            </div>
            <div class="col-md-6">
                @if (InquiryDocument?.Specialities?.Any() == true)
                {
                    @foreach (var rec in InquiryDocument.Specialities)
                    {
                        <div class="row">
                            <SpecialityRecordView Record="@rec"/>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info">
                        <RadzenLabel Text="Нет информации о специальностях"/>
                    </div>
                }
            </div>
        </div>
        @if (!string.IsNullOrWhiteSpace(InquiryDocument?.WorkingExperience))
        {
            <div class="row">
                <div class="col-md-6">
                    <RadzenLabel Text="Опыт работы"/>
                    <RadzenLabel Text="@InquiryDocument.WorkingExperience"/>
                </div>
            </div>
        }
        <div class="row">
            <VulnerabilitiesView Vulnerabilities="@InquiryDocument?.VulnerabilityFactors"/>
        </div>
    </RadzenFieldset>
</div>
@code {
    [Parameter] public Inquiry? InquiryDocument { get; set; }

    private static string Compose(SelfInquiry.InquiryChannel chan)
    {
        if (chan == SelfInquiry.InquiryChannel.None) return "не указано";
        var sb = new StringBuilder();
        foreach (var val in Decompose(chan))
        {
            if (sb.Length != 0)
                sb.Append(", ");
            sb.Append(MapSelfInqurySources(val));
        }
        return sb.ToString();
    }

    private static string MapSelfInqurySources(SelfInquiry.InquiryChannel chan) =>
        chan switch
        {
            SelfInquiry.InquiryChannel.Vk => "Вконтакте",
            SelfInquiry.InquiryChannel.Facebook => "Фейсбук",
            SelfInquiry.InquiryChannel.Instagramm => "ИНстаграмм",
            SelfInquiry.InquiryChannel.Email => "Почта",
            SelfInquiry.InquiryChannel.Phone => "Телефон",
            SelfInquiry.InquiryChannel.Whatsapp => "Whatsapp",
            SelfInquiry.InquiryChannel.Viber => "Viber",
            SelfInquiry.InquiryChannel.Telegramm => "Telegramm",
            SelfInquiry.InquiryChannel.Signal => "Signal",
            _ => chan.ToString()
        };

    private static ICollection<SelfInquiry.InquiryChannel> Decompose(SelfInquiry.InquiryChannel chan)
    {
        var allValuesColelction = Enum.GetValues(typeof(SelfInquiry.InquiryChannel))
            .OfType<SelfInquiry.InquiryChannel>()
            .Where(x => x != SelfInquiry.InquiryChannel.None);
        var result = new List<SelfInquiry.InquiryChannel>();
        foreach (var candidate in allValuesColelction)
        {
            if((chan & candidate) == candidate)
                result.Add(candidate);
        }
        return result.Distinct().ToList();
    }

}
