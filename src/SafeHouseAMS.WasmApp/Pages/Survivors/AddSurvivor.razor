@page "/AddSurvivor"
@using SafeHouseAMS.BizLayer.Abstractions.Models
@using SafeHouseAMS.BizLayer.Abstractions.Services
@inject ISurvivorCatalogue _survivorCatalogue;
@inject NavigationManager _navigation;

<h3>Новая карточка постардавшего</h3>

<RadzenTemplateForm TItem="Survivor" Submit="SubmitSurvivor" Data=@_survivor>
    <div class="row">
        <div class="col-md-6">
            <RadzenFieldset Text="Общая информация">
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Имя" />
                    </div>
                    <div class="col-md-8">
                        <RadzenTextBox Name="NameTextBox" Placeholder="Введите имя..." @bind-Value=@_survivor.Name />
                        <RadzenRequiredValidator Component="NameTextBox" Text="Имя обязательно для заполнения" Popup="false" Style="position: absolute"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Пол" />
                    </div>
                    <div class="col-md-4">
                        <RadzenDropDown @bind-Value="_survivor.Sex" Data="_sexes"
                                        TextProperty="@nameof(SexEnumVM.description)" ValueProperty="@nameof(SexEnumVM.sexValue)"/>
                    </div>
                    @if (_survivor.Sex == SexEnum.Other)
                    {
                        <div class="col-md-4">
                            <RadzenTextBox Placeholder="Уточните, если возможно" @bind-Value=@_survivor.OtherSex />
                        </div>
                    }
                </div>
                <div class="row">
                    <div class="col-md-4 align-items-center d-flex">
                        <RadzenLabel Text="Дата рождения"/>
                    </div>
                    <div class="col-md-4">
                        <div class="row">
                            <RadzenRadioButtonList @bind-Value=@_dobIsAccurate TValue="bool">
                                <Items>
                                    <RadzenRadioButtonListItem Text="Известна" Value="true" />
                                    <RadzenRadioButtonListItem Text="Возраст" Value="false" />
                                </Items>
                            </RadzenRadioButtonList>
                        </div>
                        <div class="row">
                            @if (_dobIsAccurate)
                            {
                                <RadzenDatePicker @bind-Value=@_survivor.BirthDateAccurate DateFormat="d" />
                            }
                            else
                            {
                                <RadzenTextBox Placeholder="Полных лет сегодня"  Change="AgeChange"/>
                            }
                        </div>
                    </div>
                </div>
            </RadzenFieldset>
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="col-md-12 d-flex align-items-end justify-content-center" style="margin-top: 16px;">
            <RadzenButton ButtonType="ButtonType.Submit" Icon="save" Text="Добавить"/>
            <RadzenButton ButtonStyle="ButtonStyle.Light" Icon="cancel" style="display: inline-block; margin-left: 10px;" Text="Отмена" Click="CancelClick"/>
        </div>
    </div>
</RadzenTemplateForm>

@code {
    private bool _dobIsAccurate = true;
    private record SexEnumVM(SexEnum sexValue, string description);

    private readonly SexEnumVM[] _sexes = {
        new(SexEnum.Female, "женский"), new(SexEnum.Male, "мужской"),
        new(SexEnum.Other, "другой"),
    };
    
    private readonly Survivor _survivor = new() {ID = Guid.NewGuid()};

    private void CancelClick()
    {
        _navigation.NavigateTo(nameof(SurvivorCatalogue));
    }

    private async Task SubmitSurvivor(Survivor obj)
    {
        await _survivorCatalogue.Add(_survivor);
        _navigation.NavigateTo(nameof(SurvivorCatalogue));
    }

    private void AgeChange(string ageString)
    {
        if (string.IsNullOrWhiteSpace(ageString))
        {
            _survivor.BirthDateCalculated = null;
            return;
        }
        
        if (int.TryParse(ageString, out var age) && age > 0)
            _survivor.BirthDateCalculated = DateTime.Today.AddYears(age * -1).AddDays(-180);
    }

}