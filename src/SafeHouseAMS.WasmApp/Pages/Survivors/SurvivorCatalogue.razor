@page "/SurvivorCatalogue"
@using SafeHouseAMS.BizLayer.Survivors
@inject ISurvivorCatalogue _survivorCatalogue
@inject NavigationManager _navigation
@inject ILogger<SurvivorCatalogue> _logger

<h3>Каталог пострадавших</h3>

<div class="container-fluid">
    <div class="row" style="margin-bottom: 5px">
        <div class="col-md-12">
            <button type="button" class="btn btn-primary" @onclick="() => _navigation.NavigateTo(nameof(NewSurvivor))">Добавить нового</button>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <RadzenDataGrid TItem="Survivor" Data="@_persons" Count="@count" 
                            @ref="personsGrid" AllowColumnResize="true"
                            LoadData="LoadDataHandler"
                            AllowPaging="true" PageSize="20">
                <Columns>
                    <RadzenDataGridColumn TItem="Survivor" Property="Num" Title="Код" Width="80px" TextAlign="TextAlign.Center"/>
                    <RadzenDataGridColumn TItem="Survivor" Property="Name" Title="Имя"/>
                    <RadzenDataGridColumn TItem="Survivor" Property="SexDisplay" Title="Пол"/>
                    <RadzenDataGridColumn TItem="Survivor" Property="Age" Title="Возраст, лет"/>
                    <RadzenDataGridColumn TItem="Survivor" Property="Num" Title="Подробнее" Width="100px" TextAlign="TextAlign.Center">
                        <Template Context="item">
                            <button type="button" class="btn btn-outline-primary" @onclick="@(() => _navigation.NavigateTo($"{nameof(SurvivorDetails)}/{item.ID}"))">
                                <span class="oi oi-list-rich"></span>
                            </button>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</div>


@code {
    RadzenDataGrid<Survivor>? personsGrid;
    private List<Survivor> _persons = new();
    int count;

    protected override async Task OnInitializedAsync()
    {
        _logger.LogInformation("Initializing");
        var items = new List<Survivor>();
        await foreach (var survivor in _survivorCatalogue.GetCollection(0, 20))
        {
            items.Add(survivor);
        }
        _persons = items;
        count = await _survivorCatalogue.GetTotalCount();
        await base.OnInitializedAsync();
        _logger.LogInformation("Initialized");
    }

    private async Task LoadDataHandler(LoadDataArgs loadArgs)
    {
        _logger.LogInformation("Loading data. Skip={Skip} take={Take}", loadArgs.Skip, loadArgs.Top);
        var items = new List<Survivor>();
        await foreach (var survivor in _survivorCatalogue.GetCollection(loadArgs.Skip ?? 0, loadArgs.Top))
        {
            items.Add(survivor);
        }
        _persons = items;
        count = await _survivorCatalogue.GetTotalCount();
        _logger.LogInformation("loaded");
    }

}