using System;
using System.ComponentModel;
using FluentAssertions;
using SafeHouseAMS.BizLayer.ExploitationEpisodes;
using Xunit;
using Xunit.Categories;

namespace SafeHouseAMS.Test.BizLayer.ExploitationEpisodes
{
    public class DetailedContactReasonTests
    {
        public enum NotFlagged
        {
            [Description("0")]Zero = 0,
            [Description("1")]One = 1,
            [Description("2")]Two = 2,
            [Description("3")]Three = 3
        }

        [Flags]public enum Flagged
        {
            Zero = 0,
            [Description("1")]One = 1,
            [Description("2")]Two = 2,
            [Description("4")]Three = 4
        }

        [Theory, UnitTest]
        [InlineData(NotFlagged.Zero, "0")]
        [InlineData(NotFlagged.One, "1")]
        [InlineData(NotFlagged.Two, "2")]
        [InlineData(NotFlagged.Three, "3")]
        public void GetTypeDescription_WhenEnumIsNotFlagged_ReturnsOnlyOneValue(NotFlagged item, string expectedDescr)
        {
            //arrange
            var sut = new DetailedContactReason<NotFlagged>("dummy", item);

            //act
            var actual = sut.GetTypeDescription();

            //assert
            actual.Should().Be(expectedDescr);
        }

        [Theory, UnitTest]
        [InlineData(Flagged.Zero, "")]
        [InlineData(Flagged.One, "1")]
        [InlineData(Flagged.Two, "2")]
        [InlineData(Flagged.Three, "4")]
        [InlineData(Flagged.Three | Flagged.One, "1, 4")]
        public void GetTypeDescription_WhenEnumIsFlagged_ReturnsAllValues(Flagged item, string expectedDescr)
        {
            //arrange
            var sut = new DetailedContactReason<Flagged>("dummy", item);

            //act
            var actual = sut.GetTypeDescription();

            //assert
            actual.Should().Be(expectedDescr);
        }
    }
}
