using System.Collections.Generic;
using System.Linq;
using AutoMapper;
using FluentAssertions;
using FsCheck;
using FsCheck.Xunit;
using SafeHouseAMS.BizLayer.LifeSituations.Vulnerabilities;
using SafeHouseAMS.Transport.MapperProfiles;

namespace SafeHouseAMS.Test.Transport.MapperProfiles
{
    public class VulnerabilityFactorsMappingTests
    {
        private Mapper BuildMapper()
        {
            var cfg = new MapperConfiguration(c => c.AddMaps(typeof(InquiryMappingProfile).Assembly));
            return new(cfg);
        }

        [Property]
        public void Vulnerabilites_RoundTrip_DoesNotChange()
        {
            Arb.Register<NotNullStringsGenerators>();
            var addictionGen = Arb.From<Addiction>().Generator.Select(x => x as Vulnerability).Zip(Arb.From<bool>().Generator).Select(x => x.Item2? x.Item1 : null);
            var childhoodViolenceGen = Arb.From<ChildhoodViolence>().Generator.Select(x => x as Vulnerability).Zip(Arb.From<bool>().Generator).Select(x => x.Item2? x.Item1 : null);
            var homelessGen = Arb.From<Homelessness>().Generator.Select(x => x as Vulnerability).Zip(Arb.From<bool>().Generator).Select(x => x.Item2? x.Item1 : null);
            var migrationGen = Arb.From<Migration>().Generator.Select(x => x as Vulnerability).Zip(Arb.From<bool>().Generator).Select(x => x.Item2? x.Item1 : null);
            var orphExpGen = Arb.From<OrphanageExperience>().Generator.Select(x => x as Vulnerability).Zip(Arb.From<bool>().Generator).Select(x => x.Item2? x.Item1 : null);
            var otherGen = Arb.From<Other>().Generator.Select(x => x as Vulnerability).Zip(Arb.From<bool>().Generator).Select(x => x.Item2? x.Item1 : null);
            var healthGen = Arb.From<HealthStatus>().Generator.Select(x => x as Vulnerability).Zip(Arb.From<bool>().Generator).Select(x => x.Item2? x.Item1 : null);

            var vulnerabilitesArb = Gen
                .Sequence(addictionGen, childhoodViolenceGen, homelessGen, migrationGen, orphExpGen, otherGen, healthGen)
                .Select(x => x.Where(y => y is not null).Select(y => y!))
                .ToArbitrary();

            var mapper = BuildMapper();

            Prop.ForAll(vulnerabilitesArb, src =>
            {
                var srcList = src.ToList();
                var dto = mapper.Map<SafeHouseAMS.Transport.Protos.Models.LifeSituations.VulnerabilityFactors>(srcList);
                var result = mapper.Map<IEnumerable<Vulnerability>>(dto).ToList();

                if (!srcList.Any())
                    result.Should().BeEmpty();
                else
                    result.Should().Contain(srcList); // .BeEquivalentTo(src, opt => opt.RespectingRuntimeTypes());
            }).QuickCheckThrowOnFailure();
        }
    }
}
